version 4.3
set nocompatible              " be iMproved, required
filetype off                  " required

"""""""""""""""""""""""""""""""""""""""""""""""""
"" @author
""   Sam Daniel Thangarajan
"" @email
""   samdaniel.thangarajan@gmail.com
""""
""""


"""""""""""""""""""""""""""""""""""""""""""""""""
"" vundle config
"""
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
 
" List of plugins to be managed by vundle
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-pathogen'
Plugin 'vim-scripts/taglist.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'kien/ctrlp.vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'nvie/vim-flake8'
Plugin 'majutsushi/tagbar'
Plugin 'fatih/vim-go'
Plugin 'airblade/vim-rooter'
Plugin 'Shougo/deoplete.nvim'
Plugin 'sheerun/vim-polyglot'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'Valloric/YouCompleteMe'
Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'zxqfl/tabnine-vim'
Plugin 'rust-lang/rust.vim'

call vundle#end()

let $VIM='~/.vim/'


"""""""""""""""""""""""""""""""""""""""""""""""""
"" vim basic config
"""

set bs=2		" allow backspacing over everything in insert mode
set ai			" always set autoindenting on
set backup		" keep a backup file
set viminfo='20,\"50	" read/write a .viminfo file, don't store more
			" than 50 lines of registers
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set binary
set showmode
set showmatch
set nowrapscan
set binary 
set filetype=on
set incsearch
set ic

"let Tlist_Ctags_Cmd = '/usr/bin/ctags'
let Tlist_Ctags_Cmd = 'ctags'
let Tlist_Inc_Winwidth = 0

map z :w
map f :f
map F :x
map W :!asrch <cword> <CR>
map [1~ 0
map [2~ R
map [3~ x
map [4~ $
map [5~ 
map [6~ 
map OB j
map OA k
map OC l
map OD h
map [B j
map [A k
map [C l
map [D h
abbr U2 U_INT16
abbr U4 U_INT32
abbr FO for ( ; ; ){} 
abbr WH while (){} 
abbr DO do{} while ();
abbr CO /*  */
abbr CB /*
abbr CE */
abbr teh the
abbr esle else
abbr NO_POR_NUM NO_PORT_NUM


if &term =~ '^screen'
   " tmux will send xterm-style keys when its xterm-keys option is on
   execute "set <xUp>=\e[1;*A"
   execute "set <xDown>=\e[1;*B"
   execute "set <xRight>=\e[1;*C"
   execute "set <xLeft>=\e[1;*D"
endif


"for cscope connections 
if has("cscope")
   set csprg=cscope
   set csto=1
   set cst
   set nocsverb
   cs add cscope.out
   set csverb
endif

"C Intending Options
"TODO: Sam changed this options
"set cinoptions=2s,>2s,e0,n0,f0,{1s,}0,^0,:s,=s,ps,ts,c3,+s,(2s,us,)20,*30,gs,hs
"set cinkeys=0{,0},:,0#,!<Tab>,<CR>,<o>,<O>,<e>,<0>,<*>,<!>

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" Make p in Visual mode replace the selected text with the "" register.
vnoremap p <Esc>:let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

 " In text files, always limit the width of text to 78 characters
 autocmd BufRead *.txt set tw=78

 augroup cprog
  " Remove all cprog autocommands
  au!

  " When starting to edit a file:
  "   For C and C++ files set formatting of comments and set C-indenting on.
  "   For other files switch it off.
  "   Don't change the order, it's important that the line with * comes first.
  autocmd FileType *      set formatoptions=tcql nocindent comments&
  autocmd FileType c,cpp  set formatoptions=croql cindent comments=sr:/*,mb:*,el:*/,://
 augroup END

 augroup gzip
  " Remove all gzip autocommands
  au!

  " Enable editing of gzipped files
  " set binary mode before reading the file
  autocmd BufReadPre,FileReadPre	*.gz,*.bz2 set bin
  autocmd BufReadPost,FileReadPost	*.gz call GZIP_read("gunzip")
  autocmd BufReadPost,FileReadPost	*.bz2 call GZIP_read("bunzip2")
  autocmd BufWritePost,FileWritePost	*.gz call GZIP_write("gzip")
  autocmd BufWritePost,FileWritePost	*.bz2 call GZIP_write("bzip2")
  autocmd FileAppendPre			*.gz call GZIP_appre("gunzip")
  autocmd FileAppendPre			*.bz2 call GZIP_appre("bunzip2")
  autocmd FileAppendPost		*.gz call GZIP_write("gzip")
  autocmd FileAppendPost		*.bz2 call GZIP_write("bzip2")

  " After reading compressed file: Uncompress text in buffer with "cmd"
  fun! GZIP_read(cmd)
    let ch_save = &ch
    set ch=2
    execute "'[,']!" . a:cmd
    set nobin
    let &ch = ch_save
    execute ":doautocmd BufReadPost " . expand("%:r")
  endfun

  " After writing compressed file: Compress written file with "cmd"
  fun! GZIP_write(cmd)
    if rename(expand("<afile>"), expand("<afile>:r")) == 0
      execute "!" . a:cmd . " <afile>:r"
    endif
  endfun

  " Before appending to compressed file: Uncompress file with "cmd"
  fun! GZIP_appre(cmd)
    execute "!" . a:cmd . " <afile>"
    call rename(expand("<afile>:r"), expand("<afile>"))
  endfun

 augroup END

 " This is disabled, because it changes the jumplist.  Can't use CTRL-O to go
 " back to positions in previous files more than once.
 if 0
  " When editing a file, always jump to the last cursor position.
  " This must be after the uncompress commands.
   autocmd BufReadPost * if line("'\"") && line("'\"") <= line("$") | exe "normal `\"" | endif
 endif

endif " has("autocmd")

:let g:ttcn_fold = 1

com! -ra I call VisBlockIncr()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""" Sam Daniel Custom profile
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au VimLeave * echo "                  github.com/SamDanielThangarajan !!!"

set cursorline

:let mapleader = '`'

if isdirectory("~/.vim/bundle/vim-pathogen")
   execute pathogen#infect()
endif

"backup dir
set backupdir=~/.vim/backup


"Set numbering
function! NumberToggle()
   if(&relativenumber == 1)
     set norelativenumber
   else
     set nonumber relativenumber
   endif
endfunc

function MyInsertLeave()
   hi CursorLine term=NONE,underline ctermfg=NONE ctermbg=236 guibg=#353535
   hi LineNr term=bold cterm=bold ctermfg=215 
   hi CursorLineNr term=bold cterm=bold ctermfg=198 
   set number relativenumber
endfunc

function MyInsertEnter()
   hi CursorLine ctermbg=DarkBlue ctermfg=LightGrey term=bold cterm=bold
   hi LineNr term=bold cterm=bold ctermfg=215 
   hi CursorLineNr term=bold cterm=bold ctermfg=198 
   set norelativenumber
endfunc

:set number relativenumber
:augroup numbertoggle
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave * call MyInsertLeave()
:  autocmd BufLeave,FocusLost,InsertEnter   * call MyInsertEnter()
:augroup END

nnoremap <leader>n :call NumberToggle()<cr>

"Set filetype for yaml
au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml

"To copy text to system clipboard
if has('macunix') | :set clipboard=unnamed | else | :set clipboard=unnamedplus | endif


"SET THE INDENT FOLDING IN THE PROGRAMS
"za - toggle
"zc - close
"zo - open
"and all commands with caps A C O.. to do all folds
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf


"SET TAG FILES
"tags created using ~/tools/Ggenerate-tags.sh
set tags=~/project_tags/${PROJECT_NAME}/${CLONE_NAME}/tags
set tags+=~/project_tags/c++_header_tags/tags
set tags+=~/project_tags/sys_tags
set tags+=~/project_tags/gmock/tags
set tags+=~/project_tags/boost/tags
if has("cscope")
    set nocsverb
    cs add ~/project_tags/${PROJECT_NAME}/${CLONE_NAME}/cscope.out
endif    
"CTRL + ] => normal jump in same buffer
"CTRL + \ => jump in new tab
"ALT + ] => jump in new vertical tab
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>


"ENABLE SYNTAX HIGHLIGHTING
syntax enable
syntax on
filetype plugin indent on
colorscheme slate

"GIT COMMIT
autocmd Filetype gitcommit setlocal spell textwidth=72

"TAGBAR COMMANDs
"<space> on a tag to get the definition
"<s> to sort the list
"+,-,=,* to close and open folds
nnoremap <silent> <leader>l :TagbarToggle<CR>


"WINDOW NAVIGATION
nnoremap <silent> <C-Right> <c-w>l
nnoremap <silent> <C-Left> <c-w>h
nnoremap <silent> <C-Up> <c-w>k
nnoremap <silent> <C-Down> <c-w>j
nnoremap <silent> <C-l> <c-w>l
nnoremap <silent> <C-h> <c-w>h
nnoremap <silent> <C-k> <c-w>k
nnoremap <silent> <C-j> <c-w>j

"Spacing
setlocal tabstop=2
setlocal softtabstop=2
setlocal shiftwidth=2
setlocal textwidth=79
setlocal expandtab
setlocal autoindent
setlocal smarttab
setlocal fileformat=unix

"Open NERD TREE by default if no files are present
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"Close vi only if NERDTREE is the only buffer open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeDirArrows = 1
let g:NERDTreeDirArrowExpandable = 'â–¸'
let g:NERDTreeDirArrowCollapsible = 'â–¾'
let g:NERDTreeIgnore = ['\.pyc$', '\.pyo$', '__pycache__$']
"Enabling the below removes the git marker
let NERDTreeShowLineNumbers=1
autocmd FileType nerdtree setlocal relativenumber


"MISC.
"Spell check
:nnoremap <F3> : set spell spelllang=en_us<CR>
:nnoremap <F4> :set nospell<CR>
nnoremap <leader>f :set nofoldenable!<cr>
command Hexmode :%!xxd
command Hexmoderevert :%!xxd -r
command Reload :so $MYVIMRC


let g:ycm_autoclose_preview_window_after_completion=1
map <leader>]  :YcmCompleter GoToDefinitionElseDeclaration<CR>
map <leader>\  :YcmCompleter GoToReferences<CR>
let g:ycm_confirm_extra_conf = 0


"Utilsnips
"let g:UltiSnipsExpandTrigger="<c-s>"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"


"Project specific vim config (indent, commands, etc.,)
"This should be always the last
if !empty($PROJECT_NAME)
   let project_name = $PROJECT_NAME
   let homedir = $HOME
   let project_specific_config = homedir . "/project_vim_config/" . project_name . "/vimrc"
   if filereadable(project_specific_config)
      exe 'source' project_specific_config
   endif
endif

command GShow :Git show
command GTree :Git tree
command GBlame :Git blame

let g:ycm_log_level='debug'

hi statusline ctermfg=215 ctermbg=0
hi statuslineNC ctermfg=12 ctermbg=0
" Formats the statusline
" https://stackoverflow.com/questions/9065941/how-can-i-change-vim-status-line-color
set statusline=\ %y
set statusline+=\ %f
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag
set statusline+=\ %=                        " align left
set statusline+=Line:%l/%L[%p%%]            " line X of Y [percent of file]
set statusline+=\ Col:%c                    " current column
set statusline+=\ Buf:%n                    " Buffer number
set statusline+=\ [%b][0x%B]\               " ASCII and byte code under cursor 
